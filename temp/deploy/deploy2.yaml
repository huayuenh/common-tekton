---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: docker-check-task2
spec:
  params:
    - name: continuous-delivery-context-secret
      description: name of the configmap containing the continuous delivery pipeline context secrets
      default: cd-secret
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: ''
    - name: repository
      description: The git repo
    - name: cluster-name
      description: The IBM Cloud cluster name
    - name: cluster-region
      description: The IBM Cloud region for your cluster
    - name: cluster-namespace
      description: The IBM Cloud cluster namespace
      default: "default"
    - name: path-to-context
      default: .
  workspaces:
    - name: workspace
      description: A workspace backing by a volume where the files (Dockerfile etc..) are expected to be
      mountPath: /artifacts
  # resources:
  # TODO consider an optional git repository as the source of the image to build
  # when cd tekton support will be to tekton pipeline v 0.10
  #   - name: workspace
  #     type: git
  #     optional: true
  steps:
    - name: deploy-to-kubernetes
      image: ibmcom/pipeline-base-image
      env:
        - name: DOCKER_FILE
          value: 'Dockerfile'
        - name: DOCKER_ROOT
          value: '/artifacts'
        - name: HOME
          value: "/root"
      script:
        #!/bin/bash
        echo "test"
        set -e -o pipefail
        source /artifacts/build.properties

        if [ $PIPELINE_DEBUG == 1 ]; then
          env
          cat /cd-config/toolchain.json
          trap env EXIT
          set -x
        fi

        IMAGE_TAG=$IMAGE_TAGS

        ibmcloud login -a $API -r $REGION
        $(ibmcloud ks cluster config --cluster "${PIPELINE_KUBERNETES_CLUSTER_NAME}" --export)
        if which oc > /dev/null && ibmcloud ks cluster get "${PIPELINE_KUBERNETES_CLUSTER_NAME}" --json | jq -e '.type=="openshift"' > /dev/null; then oc login -u apikey -p "${IBMCLOUD_API_KEY}" ; fi
        while read line; do export $line; done < /artifacts/build.properties
        cp /artifacts/build.properties .

        #!/bin/bash
        # uncomment to debug the script
        
        
        
        echo "DEPLOYMENT SUCCEEDED"

