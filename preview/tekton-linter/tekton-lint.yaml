---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: tekton-lint
  documentation: https://github.ibm.com/one-pipeline/common-tekton-tasks/yaml/README.md
spec:
  inputs:
    params:
      - name: task-pvc
        description: the task pvc - this is the volume where the files for linting are expected to be
      - name: path
        description: path to YAML or directory containing YAMLS to scan
        default: "/artifacts"
      - name: statuses-url
        description: set the github statues url to enable git status updates
        default: ""
      - name: status-context
        description: customise github status context
        default: "Tekton Linter"
      - name: status-pending-description
        description: customise github status pending description
        default: "Running Tekton Linter..."
      - name: status-success-description
        description: customise github status success description
        default: "Tekton Linter Passed"
      - name: status-fail-description
        description: customise github status failed description
        default: "Tekton Lint Failed"
      - name: pipeline-debug
        description: Pipeline debug mode
        default: "0"
  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(inputs.params.pipeline-debug)
  steps:
    - name: tekton-lint
      image: ibmcom/pipeline-base-image
      workingDir: "/tekton-lint"
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
      env:
        - name: STATUS_CONTEXT
          value: $(inputs.params.status-context)
        - name: STATUS_PENDING_DESCRIPTION
          value: $(inputs.params.status-pending-description)
        - name: STATUS_SUCCESS_DESCRIPTION
          value: $(inputs.params.status-success-description)
        - name: STATUS_FAILURE_DESCRIPTION
          value: $(inputs.params.status-fail-description)
        - name: PATH_TO_DEFS
          value: $(inputs.params.path)
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
        - name: PIPELINE_RUN_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        - name: STATUSES_URL
          value: $(inputs.params.statuses-url)
      command: ["/bin/bash", "-c"]
      args:
        - |
          #!/bin/bash
          set +ex
          . /root/.nvm/nvm.sh

          if [ $PIPELINE_DEBUG == 1 ]; then
            env
            cat /cd-config/toolchain.json
            trap env EXIT
            set -x
          fi

          function set-status() {
            local statuses_url=$1
            local target_url=$2
            local state=$3
            local context=$4
            local description=$5
            local body="{\"state\": \"$state\", \"target_url\": \"$target_url\", \
            \"description\": \"$description\", \"context\": \"$context\"}"

            curl -X POST $statuses_url \
              -H "Authorization: Bearer $GHE_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$body"
          }

          source /artifacts/build.properties
          STATUSES_TARGET_URL="https://cloud.ibm.com/devops/pipelines/tekton/$PIPELINE_ID/runs/$PIPELINE_RUN_ID?env_id=ibm:yp:us-south"
          if [[ ! -z $STATUSES_URL ]]; then
            set-status $STATUSES_URL $STATUSES_TARGET_URL pending $STATUS_CONTEXT $STATUS_PENDING_DESCRIPTION
          fi
          git clone https://${GHE_TOKEN}@github.ibm.com/cocoa/tekton-lint.git
          cd tekton-lint
          npm i
          definitions=$(find $PATH_TO_DEFS | grep -E -v "yamllint" | grep -E -v "template" | grep -v "bluemix" | grep -E "\.ya?ml$")
          linter_issues=$(node ./lint.js $definitions)

          if [[ -z $linter_issues ]]; then
            echo "No issues were found"
              if [[ ! -z $STATUSES_URL ]]; then
                set-status $STATUSES_URL $STATUSES_TARGET_URL success $STATUS_CONTEXT $STATUS_SUCCESS_DESCRIPTION
              fi
          else
              if [[ ! -z $STATUSES_URL ]]; then
                set-status $STATUSES_URL $STATUSES_TARGET_URL failure $STATUS_CONTEXT $STATUS_FAILURE_DESCRIPTION
              fi
            echo $linter_issues
            exit 1
          fi

  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
