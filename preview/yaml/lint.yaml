---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: yaml-lint
  documentation: https://github.ibm.com/one-pipeline/common-tekton-tasks/yaml/README.md
spec:
  inputs:
    params:
      - name: task-pvc
        description: the task pvc - this is the volume where the files for linting are expected to be
      - name: path
        description: path to YAML or directory containing YAMLS to scan
        default: "/artifacts"
      - name: rules
        description: custom rules file to apply to the linter or use the default "relaxed" rule set
        default: ""
      - name: flags
        description: add optional flags to yamllint
        default: ""
      - name: fail_task
        description: true or false, Fail task on linting failure
        default: "false"
      - name: strict-mode
        description: use the --strict flag
        default: "true"
      - name: statuses_url
        description: set the github statues url to enable git status updates
        default: ""
      - name: statuses_target_url
        description: set the github target url for the status
        default: "https://cloud.ibm.com/devops/"
      - name: status_context
        description: customise github status context
        default: "Tekton YAML Lint"
      - name: status_pending_description
        description: customise github status pending description
        default: "Tekton running YAML Lint..."
      - name: status_success_description
        description: customise github status success description
        default: "YAML Lint Passed"
      - name: status_fail_description
        description: customise github status failed description
        default: "Tekton Failed YAML Lint..."
      - name: gitUser
        description: Github user for the clone
        default: ""
      - name: gitPassword
        description: Github password for the clone
        default: ""
      - name: pipeline-debug
        description: Pipeline debug mode
        default: "1"

  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(inputs.params.pipeline-debug)

  steps:
    - name: lint
      image: python:3.8.1-alpine3.11
      workingDir: "/artifacts"
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
      env:
        - name: GIT_USER
          value: $(inputs.params.gitUser)
        - name: GIT_PASSWORD
          value: $(inputs.params.gitPassword)
      command: ["/bin/sh", "-c"]
      args:
        - |
          #!/bin/sh

          if [ $PIPELINE_DEBUG == 1 ]; then
            pwd
            env
            trap env EXIT
            set -x
          fi

          STRICT_MODE=""

          if [ "$(inputs.params.strict-mode)" == "true" ]; then
            STRICT_MODE="--strict"
          fi

          export $STRICT_MODE

          pip install yamllint

          if [[ "$(inputs.params.statuses_url)" != "" ]]; then
            if [[ "${GIT_USER}" == "" ]]; then
              CREDS="/artifacts/credentials/cred.json"
              GIT_USER=$(cat ${CREDS} | python -c 'import json,sys;print(json.load(sys.stdin)["GIT_AUTH_USER"])')
              GIT_PASSWORD=$(cat ${CREDS} | python -c 'import json,sys;print(json.load(sys.stdin)["GIT_TOKEN"])')
            fi
            if [[ "${GIT_USER}" == "" || "${GIT_PASSWORD}" == "" ]]; then
              echo "ERROR: Status URL Provided but Users and Password not"
              echo "Exiting failed!!!"
              set -e
              exit 1
            fi
            apk add curl
            curl -s -o /dev/null --max-time 60 -X POST \
                 -u ${GIT_USER}:${GIT_PASSWORD} \
                 -H "Content-Type: application/json" \
                 -d '{"state": "pending",
                    "target_url": "$(inputs.params.statuses_target_url)",
                    "description": "$(inputs.params.status_pending_description)",
                    "context": "$(inputs.params.status_context)"}' \
                  $(inputs.params.statuses_url)
          fi

          if [[ "$(inputs.params.rules)" == "" ]]; then
            yamllint $STRICT_MODE $(inputs.params.flags) $(inputs.params.path)
            LINT_FAIL=$?
          elif [[ "$(inputs.params.rules)" == "relaxed" ]]; then
            yamllint $STRICT_MODE $(inputs.params.flags) -d relaxed $(inputs.params.path)
            LINT_FAIL=$?
          else
            if test -f "$(inputs.params.rules)"; then
              cp $(inputs.params.rules) .yamllint.yaml
            else
              RULES=$(find . -name "$(inputs.params.rules)")
              if test -f "${RULES}"; then
                cp ${RULES} .yamllint.yaml
              else
                echo "ERROR: Rules file: $(inputs.params.rules) not found"
                echo "Exiting failed!!!"
                set -e
                exit 1
              fi
            fi
            echo "Using Rules:"
            cat .yamllint.yaml
            yamllint $STRICT_MODE $(inputs.params.flags) $(inputs.params.path)
            LINT_FAIL=$?
          fi

          if [[ $LINT_FAIL == 0 ]]; then
            echo "YAML Lint Complete, No Errors Found!"
            if [[ "$(inputs.params.statuses_url)" != "" ]]; then
              curl -s -o /dev/null --max-time 60 -X POST \
                -u ${GIT_USER}:${GIT_PASSWORD} \
                -H "Content-Type: application/json" \
                -d '{"state": "success",
                     "target_url": "$(inputs.params.statuses_target_url)",
                     "description": "$(inputs.params.status_success_description)",
                     "context": "$(inputs.params.status_context)"}' \
                $(inputs.params.statuses_url)
            fi
          else
            if [[ "$(inputs.params.statuses_url)" != "" ]]; then
              curl -s -o /dev/null --max-time 60 -X POST \
                -u ${GIT_USER}:${GIT_PASSWORD} \
                -H "Content-Type: application/json" \
                -d '{"state": "failure",
                     "target_url": "$(inputs.params.statuses_target_url)",
                     "description": "$(inputs.params.status_fail_description)",
                     "context": "$(inputs.params.status_context)"}' \
                $(inputs.params.statuses_url)
            fi
            if [[ "$(inputs.params.fail_task)" == "true" ]]; then
                echo "Exiting failed!!!"
                set -e
                exit $LINT_FAIL
            fi
          fi
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
