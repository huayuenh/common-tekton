---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: get-git-credentials
  documentation: https://github.ibm.com/one-pipeline/common-tekton-tasks/git/README.md
spec:
  inputs:
    params:
      - name: credentials-pvc
        description: the output pvc to store credentials
      - name: repository
        description: the git repo url
      - name: ibmcloud-api-key
        description: the IBM Cloud API key
      - name: ibmcloud-api
        description: ibmcloud api endpoint
        default: "https://cloud.ibm.com"
      - name: continuous-delivery-context-secret
        description: name of the configmap containing the continuous delivery pipeline context secrets
        default: cd-secret
      - name: propertiesFile
        description: file containing properties out of clone task
        default: build.properties
      - name: repository-integration
        description: the repo integration name
        default: ""
      - name: pipeline-debug
        description: Pipeline debug mode
        default: "0"
  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(inputs.params.pipeline-debug)
      - name: API_KEY
        value: $(inputs.params.ibmcloud-api-key)
  steps:
    - name: fetch-git-token
      image: ibmcom/pipeline-base-image
      env:
        - name: HOME
          value: "/root"
        - name: API_ENDPOINT
          value: $(inputs.params.ibmcloud-api)
        - name: REPOSITORY
          value: $(inputs.params.repository)
        - name: PROPERTIES_FILE
          value: $(inputs.params.propertiesFile)
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail

          if [ $PIPELINE_DEBUG == 1 ]; then
            pwd
            env
            trap env EXIT
            set -x
          fi

          TOOLCHAIN_CONFIG=$(cat /config/toolchain.json)
          TOOLCHAIN_REGION=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.region_id' | awk -F: '{print $3}')
          TOOLCHAIN_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.toolchain_guid')
          REGION_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.region_id')

          if [[ ! -z  "$(inputs.params.repository-integration)" ]];
          then
            REPOSITORY=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.services[]  |
            select(.toolchain_binding.name == "$(inputs.params.repository-integration)") | .parameters.repo_url')
          fi

          REPO_NAME=$(echo ${REPOSITORY} | sed -e "s|.*/||"  -e "s/.git//")
          echo "Fetching token for $REPOSITORY"
          ibmcloud config --check-version false
          ibmcloud login -a $API_ENDPOINT -r $TOOLCHAIN_REGION --apikey $API_KEY
          TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token')

          echo "Doing curl ${API_ENDPOINT}/devops/toolchains/${TOOLCHAIN_ID}?env_id=${REGION_ID}"
          curl -s -X GET -o _toolchain.json -H "Accept: application/json" \
            -H "Authorization: $TOKEN" "${API_ENDPOINT}/devops/toolchains/${TOOLCHAIN_ID}?env_id=${REGION_ID}"
          if jq '.services' _toolchain.json > /dev/null 2>&1; then
            echo "Found toolchain with id $TOOLCHAIN_ID in region $REGION_ID"
          else
            echo "Toolchain with id $TOOLCHAIN_ID in region $REGION_ID not found"
            exit 1
          fi

          if [[ "$REPOSITORY" != *.git ]]; then
            echo "Adding .git suffix to Repository URL"
            REPOSITORY="${REPOSITORY}.git"
          fi
          GIT_SERVICE_INSTANCE_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r \
            --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .instance_id')
          if [ -z "$GIT_SERVICE_INSTANCE_ID" ]; then
            echo "No Git integration (repository url: $REPOSITORY) found in the toolchain"
            exit 1
          fi
          GIT_SERVICE_TYPE=$(echo ${TOOLCHAIN_CONFIG} | jq -r \
            --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .service_id')
          GIT_TOKEN_URL=$(echo ${TOOLCHAIN_CONFIG} | jq -r \
            --arg git_repo "$REPOSITORY" \
            '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.token_url')
          GIT_TOKEN=$(curl -s -X GET -H "Accept: application/json" \
            -H "Authorization: $TOKEN" \
            "${GIT_TOKEN_URL}?toolchain_id=${TOOLCHAIN_ID}&service_instance_id=${GIT_SERVICE_INSTANCE_ID}&repo_url=${REPOSITORY}"\
            | jq -r '.access_token')
          if [ "$GIT_SERVICE_TYPE" == "github" ]; then
            GIT_AUTH_USER="x-oauth-basic"
          elif [ "$GIT_SERVICE_TYPE" == "githubpublic" ]; then
            GIT_AUTH_USER="x-oauth-basic"
          elif [ "$GIT_SERVICE_TYPE" == "hostedgit" ]; then
            GIT_AUTH_USER="oauth2"
          elif [ "$GIT_SERVICE_TYPE" == "gitlab" ]; then
            GIT_AUTH_USER="oauth2"
          elif [ "$GIT_SERVICE_TYPE" == "bitbucketgit" ]; then
            GIT_AUTH_USER="x-token-auth"
          else
            GIT_AUTH_USER="x-token-auth"
          fi;

          cd /artifacts
          echo "REPOSITORY=$REPOSITORY" >> $PROPERTIES_FILE
          echo "export GIT_AUTH_USER=$GIT_AUTH_USER" >> $PROPERTIES_FILE
          echo "export GIT_TOKEN=$GIT_TOKEN" >> $PROPERTIES_FILE
          echo "export GHE_TOKEN=$GIT_TOKEN" >> $PROPERTIES_FILE
          echo "export REPO_NAME=$REPO_NAME" >> $PROPERTIES_FILE
          echo "export REPO=$REPO_NAME" >> $PROPERTIES_FILE
      volumeMounts:
        - mountPath: /config
          name: config-volume
        - mountPath: /artifacts
          name: task-volume
  volumes:
    - name: config-volume
      configMap:
        name: toolchain
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.credentials-pvc)
