---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: git-clone
  documentation: https://github.ibm.com/one-pipeline/common-tekton-tasks/git/README.md
spec:
  inputs:
    params:
      - name: task-pvc
        description: the output pvc to store cloned repo
      - name: repository
        description: the git repo url
      - name: branch
        description: the branch for the git repo
        default: "master"
      - name: origin
        description: origin to merge the code with
        default: ""
      - name: revision
        description: The git revision/commit to clone empty to just use branch
        default: ""
      - name: directoryName
        description: Directory to clone into in the artifacts direcory of the PVC
        default: ""
      - name: gitUser
        description: Github user for the clone
        default: ""
      - name: gitPassword
        description: Github password for the clone
        default: ""
      - name: propertiesFile
        description: file containing properties out of clone task
        default: build.properties
      - name: pipeline-debug
        description: Pipeline debug mode
        default: "0"
  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(inputs.params.pipeline-debug)
  steps:
    - name: clone-repo
      image: ibmcom/pipeline-base-image
      workingDir: "/artifacts"
      env:
        - name: REPOSITORY
          value: $(inputs.params.repository)
        - name: BRANCH
          value: $(inputs.params.branch)
        - name: ORIGIN
          value: $(inputs.params.origin)
        - name: REVISION
          value: $(inputs.params.revision)
        - name: DIRECTORY_NAME
          value: $(inputs.params.directoryName)
        - name: GIT_AUTH_USER
          value: $(inputs.params.gitUser)
        - name: GIT_TOKEN
          value: $(inputs.params.gitPassword)
        - name: PROPERTIES_FILE
          value: $(inputs.params.propertiesFile)
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e
          source $PROPERTIES_FILE

          if [ $PIPELINE_DEBUG == 1 ]; then
              pwd
              env
              trap env EXIT
              set -x
          fi

          if [[ "${GIT_AUTH_USER}" == "" || "${GIT_TOKEN}" == "" ]]; then
            echo "ERROR: User or token not set"
            echo "Exiting failed!!!"
            exit 1
          fi

          GIT_AUTH_USER=$(echo ${GIT_AUTH_USER} | sed -e "s/@/%40/g")
          GIT_URL=$(echo "${REPOSITORY}" | sed -e "s/:\/\//:\/\/${GIT_AUTH_USER}:${GIT_TOKEN}@/g")

          echo "Cloning ${REPOSITORY}"

          if [[ "${REVISION}" ]]; then
            # check if the branch exists (that may not be the case in case of a pipeline-run re-run)
            echo "Fetching specific -${REVISION}- commit"

            if [[ -z "${BRANCH}" ]]; then
              # No branch provided
              git clone -q -n $GIT_URL $DIRECTORY_NAME
            elif git ls-remote --heads --exit-code ${GIT_URL} ${BRANCH} > /dev/null 2>&1; then
              git clone -q -b $BRANCH $GIT_URL $DIRECTORY_NAME
            else
              echo "branch ${BRANCH} does not exists in ${REPOSITORY}"
              git clone -q -n $GIT_URL $DIRECTORY_NAME
            fi
          else
            git clone -q -b $BRANCH $GIT_URL $DIRECTORY_NAME
          fi
          if [[ -z "${DIRECTORY_NAME}" ]]; then
            # Find the "humanish" part of the git source repository that corresponds to the clone directory
            # REPOSITORY contains the repository url with .git suffix
            DIRECTORY_NAME=$(basename "${REPOSITORY##*/}" .git)
          fi
          current_dir=$(pwd)
          cd $DIRECTORY_NAME

          if [[ "${REVISION}" != "" ]]; then
            # Point the HEAD to the specific revision
            git checkout -q ${REVISION}
          fi
          echo "Origin: ${ORIGIN}"
          if [[ "${ORIGIN}" != "" ]]; then
            git config --global user.email "tekton@pipeline.com"
            git config --global user.name "Tekton"
            git merge origin/${ORIGIN}
          fi
          GIT_COMMIT=$(git show-ref --head | head -n1 | awk '{print $1}')
          cd $current_dir
          echo "git clone of ${REPOSITORY} (branch ${BRANCH} Commit ${GIT_COMMIT}) done to directory ${DIRECTORY_NAME}"

          ls
          if [ "$PROPERTIES_FILE" ]; then
            echo "GIT_URL=$GIT_URL" >> $PROPERTIES_FILE
            echo "GIT_BRANCH=$BRANCH" >> $PROPERTIES_FILE
            echo "GIT_COMMIT=$GIT_COMMIT" >> $PROPERTIES_FILE
            echo "APP_DIRECTORY=$DIRECTORY_NAME" >> $PROPERTIES_FILE
          fi
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
